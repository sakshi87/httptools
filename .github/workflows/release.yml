name: Release

on:
  push:
    branches:
      - master
      - "ci"
      - test
      - "[0-9]+.[0-9x]+*"
    paths:
      - "httptools/_version.py"
  pull_request:
    branches:
      - master
      - test

jobs:
  validate-release-request:
    runs-on: ubuntu-latest
    steps:
    - name: Validate release PR
      uses: edgedb/action-release/validate-pr@master
      id: checkver
      with:
        github_token: dbb25c5f67ceb45ede0680348b17aff5d650ca08
        version_file: httptools/_version.py
        version_line_pattern: |
          __version__\s*=\s*(?:['"])([[:PEP440:]])(?:['"])

    - name: Store release version for later use
      env:
        VERSION: ${{ steps.checkver.outputs.version }}
      run: |
        mkdir -p dist/
        echo "${VERSION}" > dist/VERSION

    - uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist/

  build-sdist:
    needs: validate-release-request
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 50
        submodules: true

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Build source distribution
      run: |
        pip install -U setuptools wheel pip
        python setup.py sdist

    - uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist/

  build-wheels:
    needs: validate-release-request
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]
        os: [ubuntu-16.04, macos-latest, windows-latest]
        exclude:
          # Python 3.5 is unable to properly
          # find the recent VS tooling
          # https://bugs.python.org/issue30389
          - os: windows-latest
            python-version: 3.5

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 50
        submodules: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python Deps
      run: |
        python -m pip install --upgrade setuptools pip wheel

    - name: Build Wheels (linux)
      if: startsWith(matrix.os, 'ubuntu')
      uses: docker://quay.io/pypa/manylinux1_x86_64
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      with:
        entrypoint: /github/workspace/.github/workflows/build-manylinux-wheels.sh

    - name: Build Wheels (non-linux)
      if: "!startsWith(matrix.os, 'ubuntu')"
      run: |
        make clean
        python setup.py bdist_wheel

    - name: Test Wheels
      if: |
        !startsWith(matrix.os, 'windows')
        && !contains(github.event.pull_request.labels.*.name, 'skip wheel tests')
      run: |
        pip install --pre httptools -f "file:///${GITHUB_WORKSPACE}/dist"
        make -C "${GITHUB_WORKSPACE}" testinstalled

    - uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist/

  build-linux-aarch64:
    name: Linux
    strategy:
      matrix:
        pyver: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]
        arch: [aarch64]
      fail-fast: false
    runs-on: ubuntu-16.04
    env:
      py: /opt/python/${{ matrix.pyver }}/bin/python
      img: quay.io/pypa/manylinux2014_${{ matrix.arch }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    - name: Install Wheels
      if: |
        !startsWith(matrix.os, 'windows')
        && !contains(github.event.pull_request.labels.*.name, 'skip wheel tests')
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} \
          bash -exc '\
            ${{ env.py }} -m pip install --upgrade setuptools pip wheel~=0.31.1 pytest && export PATH=/opt/_internal/cpython-3.8.6/bin:$PATH && echo $PATH &&\
            make clean && \
            git submodule update --init && \
            ${{ env.py }}  setup.py bdist_wheel && \
            auditwheel repair dist/*.whl --wheel-dir dist/ && \
            ${{ env.py }} -m pip install --pre httptools -f "file:///${GITHUB_WORKSPACE}/dist" && \
            echo $PATH && pytest tests/__init__.py \
          '
    - uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist/

  publish:
    needs: [build-sdist, build-wheels, build-linux-aarch64]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 5
        submodules: false

    - uses: actions/download-artifact@v1
      with:
        name: dist
        path: dist/

    - name: Extract Release Version
      id: relver
      run: |
        set -e
        echo ::set-output name=version::$(cat dist/VERSION)
        rm dist/VERSION

    - name: Merge and tag the PR
      uses: edgedb/action-release/merge@master
      with:
        github_token: dbb25c5f67ceb45ede0680348b17aff5d650ca08
        ssh_key: ${{ secrets.RELEASE_BOT_SSH_KEY }}
        gpg_key: ${{ secrets.RELEASE_BOT_GPG_KEY }}
        gpg_key_id: "5C468778062D87BF!"
        tag_name: v${{ steps.relver.outputs.version }}

    - name: Publish Github Release
      uses: elprans/gh-action-create-release@master
      env:
        github_token: dbb25c5f67ceb45ede0680348b17aff5d650ca08
      with:
        tag_name: v${{ steps.relver.outputs.version }}
        release_name: v${{ steps.relver.outputs.version }}
        target: ${{ github.event.pull_request.base.ref }}
        body: ${{ github.event.pull_request.body }}
        draft: true

    - run: |
        ls -al dist/

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
        # password: ${{ secrets.TEST_PYPI_TOKEN }}
        # repository_url: https://test.pypi.org/legacy/
